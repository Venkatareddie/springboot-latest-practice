package in.venkat.customgenerator;

import java.io.Serializable;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import org.hibernate.engine.spi.SharedSessionContractImplementor;

import in.venkat.generator.CustomIdGenerator;

/**
 * CustomOwnGenerator generates IDs using an Oracle sequence.
 */
public class CustomOwnGenerator implements CustomIdGenerator {

    private static final String SEQUENCE_NAME = "ORD"; // Replace with your Oracle sequence name

    public Serializable generate(SharedSessionContractImplementor session, Object object) {
        Connection connection = null;
        PreparedStatement ps = null;
        ResultSet rs = null;

        try {
            // Get a connection from the session
            connection = ((Object) session).connection();

            // Query the next value from the sequence
            String sql = "SELECT " + SEQUENCE_NAME + ".NEXTVAL FROM DUAL";
            ps = connection.prepareStatement(sql);
            rs = ps.executeQuery();

            if (rs.next()) {
                return rs.getLong(1); // Return the sequence value as the ID
            } else {
                throw new SQLException("Unable to retrieve the next value from sequence: " + SEQUENCE_NAME);
            }
        } catch (SQLException e) {
            throw new RuntimeException("Error generating ID using Oracle sequence", e);
        } finally {
            // Clean up resources
            closeResources(rs, ps, connection);
        }
    }

    /**
     * Utility method to close resources.
     */
    private void closeResources(ResultSet rs, PreparedStatement ps, Connection connection) {
        try {
            if (rs != null) rs.close();
            if (ps != null) ps.close();
            if (connection != null) connection.close();
        } catch (SQLException e) {
            // Log the exception if needed
        }
    }
}
